service: tasks-app-2-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-tasks

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [ TasksTable, Arn ]

functions:
  create:
    handler: create.main
    events:
      - http:
          path: tasks
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
      handler: list.main
      events:
        - http:
            path: tasks
            method: get
            cors: true
            authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}